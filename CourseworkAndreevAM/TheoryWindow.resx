<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>	Известный специалист по архитектуре компьютеров М. Флинн первым обратил внимание на существование двух причин, порождающих вычислительный параллелизм – 
независимость потоков команд, одновременно существующих в системе, и 
несвязанность данных, обрабатываемых в одном потоке команд.

Программный параллелизм | Средства параллельной обработки
Программы - Мультипроцессирование
Циклы и итерации - Векторная обработка
Операторы и команды - Многофункциональная обработка
Фазы команд - Конвейер команд

SISD (англ. Single Instruction, Single Data) – системы с одним потоком команд и одним потоком данных.
SIMD (англ. Single Instruction, Multiple Data) – системы с одним потоком команд и множеством потоков данных.
MISD (англ. Multiple Instruction, Single Data) – системы с множеством потоков команд и одним потоком данных.
MIMD (англ. Multiple Instruction, Multiple Data) – системы с множеством потоков команд и множеством потоков данных.

	Грид-система (англ. grid) представляет собой программно-аппаратный комплекс, 
построенный на основе кластерного вычислителя. Узлами такого кластера обычно являются ПК.

	Суть облачных технологий (облачных вычислений) состоит в предоставлении 
программных и виртуализированных аппаратных ресурсов в качестве сервиса.
	Основные свойства облачных технологий:
- Самообслуживание по требованию. 
- Универсальный доступ по сети.
- Объединение ресурсов.
- Быстрая эластичность.
- Учёт потребления.

	Классификацию облачных сервисов по типу ресурса, к которому предоставляется доступ:
	SaaS (Приложение как сервис) – вариант, при котором пользователю предоставляется ПО по подписке.
	PaaS (Платформа как сервис). В облаке функционирует набор программ, сервисов и библиотек, на основе которых предлагается разрабатывать свои приложения.
	IaaS (Инфраструктура как сервис). Клиент получает в своё распоряжение виртуализированные аппаратные ресурсы.
	DaaS (Desktop as a Service, Рабочее место как сервис). Пользователю предоставляется виртуальное рабочее место – программный комплекс, включающий ОС и прикладные приложения.
	DaaS (Data as a Service, Данные как сервис). В качестве сервиса пользователю предоставляется доступ к данным провайдера, полученным из различных каналов с различных устройств.
	CaaS (Коммуникации как сервис). В качестве сервиса пользователю предоставляются услуги связи.

	Можно выделить следующие модели развёртывания облачных систем
• Частное облако.
• Публичное облако.
• Гибридное облако.
	Частное облако предназначено для использования одной организацией, включающей несколько потребителей. 
	Публичное облако предназначено для использования широким кругом лиц.
	Гибридное облако – комбинация из нескольких различных облачных инфраструктур, остающихся уникальными объектами, но связанных между собойтехнологиями передачи данных.

	CDN - сеть доставки содержимого (англ. Content Delivery Network, CDN) – географически распределённая сеть прокси-серверов, создаваемая для повышения доступности (в смысле процента времени, когда ресурс доступен) и производительности.
	Одной из распространённых разновидностей CDN является вебкэш.

	К современным системам обнаружения ресурсов предъявляются следующие требования:
1. Высокая масштабируемость. Система должна быть способна работать с десятками тысяч узлов.
2. Высокая доступность. Система должна быть защищённой от сбоев, быстро 
восстанавливаться от них в автоматическом режиме.
3. Учёт как статических (редко изменяемых), так и динамических характеристик узлов.

	Виртуальная организация (ВО) – это временный или постоянный набор географически распределённых вычислителей, соединённых с помощью коммуникационной подсистемы для выполнения поставленной задачи.</value>
  </data>
</root>